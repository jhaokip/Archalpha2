#!/bin/bash

# Cleaning the TTY.
clear

source cosmetics
source keyboard_selector
source check_internet
source update_mirrors
source edit_pacman
source choose_install_disk
source install_scheme_selector
source clean_install
source automatic_install
source manual_install
source kernel_selector
source network_selector
source network_installer
source microcode_detector
source locale_selector
source hostname_selector
source userpass_selector
source rootpass_selector
source create_subvolumes
source mount_and_create_mountpoints
source mount_subvolumes_partitions
source virt_check


cosmetics


# Welcome screen.
echo -ne "${BOLD}${BYELLOW}
======================================================================
███████╗ █████╗ ███████╗██╗   ██╗      █████╗ ██████╗  ██████╗██╗  ██╗
██╔════╝██╔══██╗██╔════╝╚██╗ ██╔╝     ██╔══██╗██╔══██╗██╔════╝██║  ██║
█████╗  ███████║███████╗ ╚████╔╝█████╗███████║██████╔╝██║     ███████║
██╔══╝  ██╔══██║╚════██║  ╚██╔╝ ╚════╝██╔══██║██╔══██╗██║     ██╔══██║
███████╗██║  ██║███████║   ██║        ██║  ██║██║  ██║╚██████╗██║  ██║
╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝        ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝
======================================================================
${RESET}"
info_print "Welcome to easy-arch, a script made in order to simplify the process of installing Arch Linux."

## set terminal font
setfont ter-120n &>/dev/null

## download git if not available

## Setting up keyboard layout.
until keyboard_selector; do : ; done

## Check network connection
check_internet

## Update pacman mirrors
update_mirrors

## Edit pacman.conf
edit_pacman

## Synchronize Arch Repos
info_print "Synchronizing pacman repositories..."
pacman -Syy &>/dev/null

## Set timedatectl
timedatectl set-ntp true
clear
 
## Choosing the target disk for installation
choose_install_disk

## Installation and Partition Scheme
until install_scheme_selector; do : ; done

## Actual partition
   case $install_choice in
      1)  clean_install
          ;;
      2)  automatic_install
          ;;
      3)  manual_install
          ;;
   esac
clear

## Setting up the kernel.
until kernel_selector; do : ; done
clear

## User choses the network.
until network_selector; do : ; done
clear

## Checking which microcode to install
microcode_detector

## User choses the locale.
until locale_selector; do : ; done
clear

# User choses the hostname.
until hostname_selector; do : ; done

# Ask user for the user/root passwords.
until userpass_selector; do : ; done

until rootpass_selector; do : ; done

############### Get UUID's of EFI, SWAP, ROOT and HOME partitions #############
EFI_UUID=$(lsblk -o UUID $EFI_DISK | grep -v UUID)
SWAP_UUID=$(lsblk -o UUID $SWAP_DISK | grep -v UUID)
ROOT_UUID=$(lsblk -o UUID $ROOT_DISK | grep -v UUID)
HOME_UUID=$(lsblk -o UUID $HOME_DISK | grep -v UUID)

echo "efi_uuid=$EFI_UUID" > UUID.txt 
echo "swap_uuid=$SWAP_UUID" >> UUID.txt
echo "root_uuid=$ROOT_UUID" >> UUID.txt 
echo "home_uuid=$HOME_UUID" >> UUID.txt
clear

##################### Creating Subvolumes ################
#info_print "About to create subvolumes (create_subvolumes)..."
create_subvolumes
read -n 1 -s -r -p "Press any key to continue..."
clear

##################### Mount and Create Mountpoints for Subvolume #################
#info_print "Mounting  and  Creating subvolumes mountpoints..."
mount_and_create_mountpoints
pacman -S --noconfirm tree &>/dev/null

info_print "The following mountpoints were just created:"
tree -L 3 /mnt
read n -1 -s -r -p "Press any key to continue..."
clear

##################### Mount the Subvolumes and Partitions
#info_print "About to mount Subvolumes and Partitions"
#read -n 1 -s -r -p "Press any key to continue..."
mount_subvolumes_partitions
clear
info_print "Verify disk partitions, formatting and mountpoints!"
sudo lsblk $DISK -o NAME,SIZE,FSTYPE,MOUNTPOINTS
read -n 1 -s -r -p "Please any key to continue..."
#input_print "Do you wish to continue to pacstrap /mnt? [y/n]: "
#read -r wish
#if [ "$wish" == "n" ]; then info_print "Exiting..."; exit; fi

##################### pacstrap Installation #####################
## Install base packages  
#
 
Base_Packages="base $kernel $kernel-headers $microcode linux-firmware base-devel btrfs-progs ntfs-3g nano vim tree grub grub-btrfs efibootmgr grub-btrfs os-prober snapper snap-pac curl wget dialog mtools dosfstools reflector git man-db man-pages texinfo xdg-utils xdg-user-dirs" 
pacstrap /mnt $Base_Packages

## Installing Network utilites
network_installer

## Virtualization check & installing necessary packages (must come afer pacstrap /mnt)
virt_check

###################### Generate fstab and Edit fstab ##########################
# Generate_fstab

genfstab -U /mnt >> /mnt/etc/fstab
clear
#info_print "ROOT UUID: $ROOT_UUID"
#info_print " EFI UUID: $EFI_UUID"
#info_print "SWAP UUID: $SWAP_UUID"
#info_print "HOME UUID: $HOME_UUID"
read -n 1 -s -r -p "Press any key to continue..."

cat /mnt/etc/fstab | less
##read -n 1 -s -r -p "Press any key to continue..."

#input_print "Do you wish to continue to editing fstab?[y/n]: "
#read -r wish
#if [ "$wish" == "n" ]; then info_print "Exiting..."; exit; fi
#clear

## Editing fstab
full_opts=$(grep subvolid=258 /mnt/etc/fstab | awk ' {print $4} ')
last_col="0  0"
opts=$(echo $full_opts | sed "s|,subvolid=258,subvol=/@/.snapshots/1/snapshot| |")
SUB="UUID=$ROOT_UUID \t \t /\t\t  btrfs \t $opts \t $last_col"
sed -i "/subvolid=258/ c $SUB" /mnt/etc/fstab  ### IMPORTANT!!!! (Add -i option to sed)
#info_print "Edited fstab..."
#cat /mnt/etc/fstab | less
#input_print "Do you wish to continue to editing 10_linux & 20_linux_xen?[y/n]: "
#read -r wish
#if [ "$wish" == "n" ]; then info_print "Exiting..."; exit; fi

##  Edit 10_linux and 20_linux_xen files 
sed -i 's/rootflags=subvol=${rootsubvol}/ /g' /mnt/etc/grub.d/10_linux
sed -i 's/rootflags=subvol=${rootsubvol}/ /g' /mnt/etc/grub.d/20_linux_xen
#info_print "Edited 10_linux..."
#cat /mnt/etc/grub.d/10_linux | less
#read -n 1 -s -r -p "Press any key to continue..."
#cat /mnt/etc/grub.d/20_linux_xen | less
clear
input_print "Do you wish to continue to system config without chrooting?[y/n]: "
read -r wish
if [ "$wish" == "n" ]; then info_print "Exiting..."; exit; fi

#################### System configurations without chrooting ##########

info_print "Configuring system (timezone, system clock, GRUB)."

# 1.Setting up the hostname.
#info_print "Setting up hostname..."
echo "$hostname" > /mnt/etc/hostname
#cat /mnt/etc/hostname
#read -n 1 -s -r -p "Press any key to continue..."

# 2. Configure selected locale, console keymap and hosts file
info_print ""
info_print "Configuring locale and console keymap..."
sed -i "/^#$locale/s/^#//" /mnt/etc/locale.gen
echo "LANG=$locale" > /mnt/etc/locale.conf
echo "KEYMAP=$kblayout" > /mnt/etc/vconsole.conf
#cat /mnt/etc/locale.conf
#cat /mnt/etc/vconsole.conf

info_print "Setting up hosts file."
cat > /mnt/etc/hosts <<EOF
127.0.0.1	localhost
::1			localhost
127.0.1.1	$hostname.localdomain	$hostname
EOF
#cat /mnt/etc/hosts
#read -n 1 -s -r -p "Press any key to continue..."

# 3. Edit pacman.conf on newly system
info_print "Editing pacman.conf..."
sed -i 's/#Color/Color/' /mnt/etc/pacman.conf
sed -i '/Color/ a ILoveCandy' /mnt/etc/pacman.conf
sed -i 's/#ParallelDownloads/ParallelDownloads/' /mnt/etc/pacman.conf
#cat /mnt/etc/pacman.conf | less

# 4. Setting up root & user account
#input_print "About to enter chroot...Do you wish to continue?[y/n]: "
#read -r wish
#if [ "$wish" == "n" ]; then info_print "Exiting..."; exit; fi

info_print "Setting root password."
echo "root:$rootpass" | arch-chroot /mnt chpasswd

# Setting user account with sudo privileges
info_print "Setting User Account..."
if [[ -n "$username" ]]; then
	echo "%wheel ALL=(ALL:ALL) ALL" > /mnt/etc/sudoers.d/wheel
	info_print "Adding User $username to the system with root privileges."
	arch-chroot /mnt useradd -m -G wheel -s /bin/bash "$username"
	info_print "Setting User password for $username."
	echo "$username:$userpass" | arch-chroot /mnt chpasswd
fi
input_print "Do you wish to continue to arch-chroot /mnt?[y/n]: "
read -r wish
if [ "$wish" == "n" ]; then info_print "Exiting..."; exit; fi


#### Main chroot section
arch-chroot /mnt /bin/bash -e <<EOF
	# 1. Setting up timezone
	echo "Inside Chroot: Setting up time zone..."
	ln -sf /usr/share/zoneinfo/$(curl -s http://ip-api.com/line?fields=timezone) /etc/localtime &>/dev/null
	cat /etc/localtime	
	sleep 3

	echo "Inside chroot: Synchronizing pacman repositories..."
	pacman -Syy

	# 3. Synchronize clocks
	echo "Inside chroot: Synchrozizing clocks..."
	 hwclock --systohc

	# 4. Initialize Snapper
	echo "Inside chroot: Initialize Snapper..."
	umount /.snapshots
	rm -r /.snapshots
	snapper --no-dbus -c root create-config /
	btrfs subvolume delete /.snapshots
	mkdir /.snapshots
	mount -a
	chmod 750 /.snapshots

	# 4. Generating locales
	echo "Inside chroot: Generating locales..."
	locale-gen &>/dev/null
	
	# 5. Installing GRUB.
	echo "Inside chroot: Installing GRUB..."
    grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=ARCH-B --modules="normal test efi_gop efi_uga search echo linux all_video gfxmenu gfxterm_background gfxterm_menu gfxterm loadenv configfile gzio part_gpt btrfs"
	grub-mkconfig -o /boot/grub/grub.cfg &>/dev/null
	
	echo "About to exit in 4 seconds...."
	exit
EOF

input_print "After chroot...Do you wish to continue?[y/n]: "
read -r wish
if [ "$wish" == "n" ]; then info_print "Exiting..."; exit; fi


# Copy post-install script (including related files, if any)
info_print "About to copy post-install.sh to /mnt/home/user..."
sudo cp post-install.sh /mnt/home/$username/
sudo cp UUID.txt /mnt/home/$username/
sudo cp cosmetics /mnt/home/$username/
if [ -f /mnt/home/$username/post-install.sh ]
	then
		info_print "post-install.sh copying success!"
	else
		info_print "post-install.sh copying failed!!!"
fi
read -n 1 -s -r -p "Press any key to continue..."
sudo umount -a &>/dev/null
clear
info_print "Installation Complete! But, you must still run the post-install.sh script after reboot!"
info_print "After reboot, Log back in as your username (not root!)."
info_print "NOTE: You will be greeted with a black tty1. Desktop Environments like "
info_print "       GNOME, KDE, XFCE or WM's etc will be installed in the next stage!" 
info_print "Once logged in, run the script: ./postinstall.sh"
info_print ""
info_print ""
read -n 1 -s -r -p "Press any key to continue..."
clear
exit

